{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","src","alt","CardList","robots","map","robot","index","key","Searchbox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","height","border","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChanged","event","searchtext","target","value","fetch","then","response","json","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAeeA,EAbF,SAACC,GAAW,IACdC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GAClB,OACI,yBAAKC,UAAU,0DACX,yBAAKC,IAAG,+BAA0BF,EAA1B,gBAA4CG,IAAI,iBACxD,6BACI,4BAAKL,GACL,2BAAIC,MCkBLK,EAvBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAKlB,OACC,6BAEEA,EAAOC,KAAI,SAACC,EAAOC,GAClB,OACC,kBAAC,EAAD,CACCC,IAAKF,EAAMP,GACXA,GAAIO,EAAMP,GACVF,KAAMS,EAAMT,KACZC,MAAOQ,EAAMR,aCFLW,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,6BACI,2BACIV,UAAU,2CACVW,KAAK,SACLd,KAAK,IACLe,YAAY,gBACZC,SAAWH,MCAZI,EARA,SAAClB,GACZ,OACI,yBAAKmB,MAAO,CAACC,UAAW,SAAUC,OAAQ,OAAQC,OAAQ,oBACrDtB,EAAMuB,SADX,MCgBOC,G,kBAjBX,WAAYxB,GAAO,IAAD,8BACd,4CAAMA,KACDyB,MAAQ,CACTC,UAAU,GAHA,E,+EAMAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGzB,OAAOG,KAAKJ,MAAMC,SAClB,8DACAG,KAAK7B,MAAMuB,a,GAbQQ,cC0CZC,E,YArCd,aAAc,IAAD,8BACZ,+CAWDC,gBAAiB,SAACC,GACjB,EAAKJ,SAAS,CAACK,WAAYD,EAAME,OAAOC,SAXxC,EAAKZ,MAAQ,CACZjB,OAAQ,GACR2B,WAAY,IAJD,E,iFAOO,IAAD,OAClBG,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA/B,GAAM,OAAI,EAAKsB,SAAS,CAACtB,gB,+BAKvB,IAAD,EACqBqB,KAAKJ,MAA3BjB,EADC,EACDA,OAAQ2B,EADP,EACOA,WACTO,EAAiBlC,EAAOmC,QAAO,SAAAjC,GACpC,OAAOA,EAAMT,KAAK2C,cAAcC,SAASV,EAAWS,kBAErD,OAAQpC,EAAOsC,OAGd,yBAAK1C,UAAU,MACd,wBAAIA,UAAU,aAAd,eACA,kBAAC,EAAD,CAAWU,aAAce,KAAKI,kBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUzB,OAAQkC,OAPtB,kE,GAtBgBX,aCMEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACL,6BACI,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.cea74100.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    const {name,email,id} = props;\r\n    return(\r\n        <div className='tc bg-light-green dib br4 pa3 ma2 grow shadow-5 ba bw3'>\r\n            <img src={`https://robohash.org/${id}123?set=set1`} alt='rafa bot pic'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\tif(false){\r\n\t\tconst error = new Error(\"Intentional error\");\r\n\t\tthrow error;\r\n\t}\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((robot, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tkey={robot.id}\r\n\t\t\t\t\t\t\tid={robot.id}\r\n\t\t\t\t\t\t\tname={robot.name}\r\n\t\t\t\t\t\t\temail={robot.email}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n      }\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Searchbox = ({searchChange}) => {\r\n    return(\r\n        <div>\r\n            <input  \r\n                className='pa3 br4 ba b--green bg-lightest-blue mb4'   \r\n                type='search' \r\n                name='q' \r\n                placeholder='search robots'\r\n                onChange= {searchChange}>\r\n            </input>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', height: '70vh', border: 'black solid 3px'}}>\r\n            {props.children};\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        };\r\n    }\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true});\r\n    }\r\n    render(){\r\n        return this.state.hasError? \r\n        <h2>Oooops something's not working</h2>:\r\n        this.props.children;\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Searchbox from '../components/Searchbox'\r\nimport Scroll from '../components/Scroll'\r\nimport './App.css';\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchtext: ''\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(robots => this.setState({robots}));\r\n\t}\r\n\tonSearchChanged= (event)=> {\r\n\t\tthis.setState({searchtext: event.target.value});\r\n\t}\r\n\trender() {\r\n\t\tconst {robots, searchtext} = this.state;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchtext.toLowerCase());\r\n\t\t});\r\n\t\treturn !robots.length ? \r\n\t\t<h2>loading robots, please wait...</h2> \r\n\t\t: (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='sega-font'>RoboFriends</h1>\r\n\t\t\t\t<Searchbox searchChange={this.onSearchChanged}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t\t\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n    <div>\n        <App/>\n    </div>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}